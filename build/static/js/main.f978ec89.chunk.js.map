{"version":3,"sources":["config/Fire.js","components/Login.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","props","login","bind","handleChange","signup","state","email","password","e","this","setState","target","name","value","preventDefault","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","createUserWithEmailAndPassword","align","className","class","for","style","marginLeft","marginBottom","onChange","type","id","aria-describedby","placeholder","onClick","Component","URL","Cards","cards","message","axios","get","response","data","event","newItem","includes","post","item","map","ref","input","addForm","onSubmit","addItem","htmlFor","renderCards","App","user","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f978ec89.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst config = {\n    apiKey: \"AIzaSyB8PcAZcXkzuqhwiE1itEi3XZ6z6lFjsSM\",\n    authDomain: \"teen-patti-5a5fc.firebaseapp.com\",\n    databaseURL: \"https://teen-patti-5a5fc.firebaseio.com\",\n    projectId: \"teen-patti-5a5fc\",\n    storageBucket: \"teen-patti-5a5fc.appspot.com\",\n    messagingSenderId: \"478653158074\",\n    appId: \"1:478653158074:web:315fbf33f859b2a4632883\",\n    measurementId: \"G-8WZ36J1853\"\n  };\n\n  const fire = firebase.initializeApp(config)\n  export default fire;","import React, { Component } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport fire from '../config/Fire';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signup = this.signup.bind(this);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  login(e) {\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u) => {\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n\n  signup(e) {\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u) => {\n    }).then((u) => { console.log(u) })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n  render() {\n    return (\n      <div align=\"center\">\n        <div className=\"Login\">\n          <form>\n            <div class=\"form-group\">\n              <label for=\"exampleInputEmail1\">Email address: </label>\n              <input value={this.state.email} style={{ marginLeft: '25px', marginBottom: '12px' }} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"exampleInputPassword1\">Password: </label>\n              <input value={this.state.password} style={{ marginLeft: '54px', marginBottom: '12px' }} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\n            </div>\n            <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\n            <button onClick={this.signup} style={{ marginLeft: '25px' }} className=\"btn btn-success\">Signup</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nvar URL = \"https://us-central1-teen-patti-5a5fc.cloudfunctions.net\"\n\nclass Cards extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cards: [],\n            message: '',\n        }\n    }\n\n    componentDidMount() {\n        return axios.get(URL + '/getCards').then((response) => {\n            this.setState({\n                cards: response.data\n            })\n        })\n    }\n\n    addItem(event) {\n        event.preventDefault()\n        const { cards } = this.state;\n        const newItem = this.newItem.value;\n\n        const isOnTheList = cards.includes(newItem)\n\n        if (isOnTheList) {\n            this.setState({\n                message: 'This item is already on the list'\n            })\n\n        } else {\n            return newItem !== '' && axios.post(URL + '/addCards', { item: newItem }).then((response) => {\n                this.setState({\n                    cards: response.data\n                })\n            })\n        }\n\n    }\n\n    clearAll() {\n        this.setState({\n            cards: [],\n            message: 'No cards in the list, add some'\n        })\n    }\n\n    renderCards() {\n        const { cards, message } = this.state;\n        return (\n            cards.map(item => {\n                return <h3>{item.item}</h3>\n            })\n        )\n    }\n\n    render() {\n        const { cards, message } = this.state;\n        return (\n            <div className=\"container\">\n                <h1>Your cards are:</h1>\n                <form ref={input => { this.addForm = input }} className=\"form-inline\" onSubmit={this.addItem.bind(this)}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"newItemInput\" className=\"sr-only\">Add New Card</label>\n                        <input ref={input => { this.newItem = input }}\n                            type=\"text\" className=\"form-control\" id=\"newItemInput\" />\n                    </div>\n                    <button className=\"btn btn-primary\">Add</button>\n                </form>\n                {this.renderCards()}\n            </div>\n        );\n    }\n}\n\nexport default Cards","import React, { Component } from 'react';\nimport './App.css';\nimport fire from './config/Fire'\nimport Login from './components/Login';\nimport Cards from './components/Cards';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      user: {},\n    }\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Welcome to Teen Patti</h2>\n        <div>\n          {this.state.user ? (<Cards />) : (<Login/>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}